apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: luck-kafka-nfs-csi
provisioner: nfs.csi.k8s.io
parameters:
  server: 192.168.31.70
  share: /data/nfs/kafka
reclaimPolicy: Delete
volumeBindingMode: Immediate

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: luck-infrastructure
  labels:
    app: kafka
spec:
  type: NodePort
  selector:
    app: kafka
  ports:
  - port: 9092
    name: broker
    nodePort: 30111

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: luck-infrastructure
spec:
  serviceName: kafka-headless
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: kafka
        image: bitnami/kafka:3.3.2
        ports:
        - name: broker
          containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "PLAINTEXT://$(MY_POD_NAME).kafka-headless.default.svc.cluster.local:9092"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: "zookeeper-cs:2181"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_KRAFT_CLUSTER_ID
          value: "abcdefghijklmnopqrstuv"
        volumeMounts:
        - name: kafka-volume
          mountPath: /bitnami/kafka/data
  volumeClaimTemplates:
  - metadata:
      name: kafka-volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: luck-kafka-nfs-csi
      resources:
        requests:
          storage: 10Gi